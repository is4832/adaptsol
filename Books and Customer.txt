import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

interface AdminService {
   void insertBook(Book book);
   
   void writeBooks();
   
   Book[] readBooks();
}

interface CustomerService {
   void insertCustomer(Customer customer);

   void writeCustomer();

   Customer[] readCustomer();
}

class AdminServiceImpl
{
 public static Book booksArray[]=new Book[5];
 public static int count = 0;
 File f1 = new File("books.txt");
   FileOutputStream fos = null;
   FileInputStream fis = null;
   ObjectOutputStream oos = null;
   ObjectInputStream ois = null;
 
 public void insertBook(Book book)
 {
   booksArray[count] = book;
   count++;
 }
 public void writeBook()
 {
    try {
         ObjectOutputStream oos1 = new ObjectOutputStream(new FileOutputStream("books.txt"));
         for (Book t : booksArray) {
            oos1.writeObject(t);
         }
         oos1.close();
      } catch (FileNotFoundException fnfe2) {
         System.out.println("FileNotFoundException2");
      } catch (IOException ioe2) {
         System.out.println("IOException2");
      }
 }
 public Book[] readBook()
 {
    try {
        fis = new FileInputStream(f1);
      } catch (FileNotFoundException fnfe2) {
         System.out.println("FileNotFoundException2");
      }
      try {
         ois = new ObjectInputStream(fis);
         for (int i = 0; i < booksArray.length; i++) {
            if (ois.available() > 0) {
               try {
                  booksArray[i] = (Book) ois.readObject();
               } catch (ClassNotFoundException cnfe) {
                  System.out.println("ClassNotFoundException");
               }

            } else {
               break;
            }
         }
         ois.close();
      } catch (IOException ioe2) {
         System.out.println("IOException2");
      }

      return booksArray;
   }
}

class CustomerServiceImpl
{
  	public static Customer[] customerArray=new Customer[5];
  	public static int count = 0;
   File f2 = new File("customers.txt");
   FileOutputStream fos = null;
   FileInputStream fis = null;
   ObjectOutputStream oos = null;
   ObjectInputStream ois = null;
public void insertCustomer(Customer customer)
{
  customerArray[count] = customer;
  count++;
}
public void writeCustomer()
{
  try {
         ObjectOutputStream oos1 = new ObjectOutputStream(new FileOutputStream("customers.txt"));
         for (Customer t : customerArray) {
            oos1.writeObject(t);
         }
         oos1.close();
      } catch (FileNotFoundException fnfe2) {
         System.out.println("FileNotFoundException2");
      } catch (IOException ioe2) {
         System.out.println("IOException2");
      }
}
public Customer[] readCustomer()
{
  try {
         fis = new FileInputStream(f2);
      } catch (FileNotFoundException fnfe4) {
         System.out.println("FileNotFoundException4");
      }
      try {
         ois = new ObjectInputStream(fis);
         for (int i = 0; i < customerArray.length; i++) {
            if (ois.available() > 0) {
               try {
                  customerArray[i] = (Customer) ois.readObject();
               } catch (ClassNotFoundException cnfe2) {
                  System.out.println("ClassNotFoundException2");
               }

            } else {
               break;
            }
         }
         ois.close();
      } catch (IOException ioe4) {
         System.out.println("IOException4");
      }

      return customerArray;
   }
}

// Class name should be "Source",
// otherwise solution won't be accepted
public class Source {
	public static void main(String args[] ) throws Exception {
		/* Enter your code here. Read input from STDIN. Print output to STDOUT */
		Scanner sc = new Scanner(System.in);

      // CUSTOMER
      int customerId, zip;
      String acity, state, country, emailId, password, firstName, lastName, city, gender;
      long phoneNumber;
      // TOYS
      int id, availableQuantity, totalQuantity;
      String title, description, author;
      double price, rentPerDay;
      while (sc.hasNext()) {
         int choice = sc.nextInt();
         switch (choice) {
            case 1:
               customerId = sc.nextInt();
               sc.nextLine();
               emailId = sc.nextLine();
               password = sc.nextLine();
               firstName = sc.nextLine();
               lastName = sc.nextLine();
               city = sc.nextLine();
               gender = sc.nextLine();
               phoneNumber = sc.nextLong();
               acity = sc.next();
               state = sc.next();
               zip = sc.nextInt();
               country = sc.next();
               Address address = new Address(acity, state, zip, country); 
               Customer cs = new Customer(customerId, emailId, password, firstName, lastName, city, gender, phoneNumber, address);
               CustomerService csi = new CustomerServiceImpl();
               csi.insertCustomer(cs);
               csi.writeCustomer();
               System.out.println("Successfully Registered");
               break;
            case 2:
               Customer[] custArr = new Customer[CustomerServiceImpl.count];
               CustomerService csi2 = new CustomerServiceImpl();
               custArr = csi2.readCustomer();
               for (int i = 0; i < CustomerServiceImpl.count; i++) {
                  System.out.println(custArr[i]);
               }
               break;

            case 3:
               id = sc.nextInt();
               sc.nextLine();
               title = sc.nextLine();
               description = sc.nextLine();
               author = sc.nextLine();
               availableQuantity = sc.nextInt();
               totalQuantity = sc.nextInt();
               price = sc.nextDouble();
               rentPerDay = sc.nextDouble();
               Book t = new Book(id, title, description, author, availableQuantity, totalQuantity, price, rentPerDay);
               AdminService asi = new AdminServiceImpl();
               asi.insertBook(t);
               asi.writeBook();
               System.out.println("Book added Successfully");
               break;

            case 4:
               Book[] bookArr = new Book[AdminServiceImpl.count];
               AdminService asi2 = new AdminServiceImpl();
               bookArr = asi2.readBook();
               for (int i = 0; i < AdminServiceImpl.count; i++) {
                  System.out.println(bookArr[i]);
               }
               break;

            default:
               System.out.println("Invalid choice");
         }

      }

	}
}
class Book implements Serializable {
   private int bookId, availableQuantity, totalQuantity;
   private String title, description, author;
   private double price, rentPerDay;
   
   Book(){
   }

   Book(int id, String title, String description, String author, int availableQuantity, int totalQuantity, double price, double rentPerDay) {
      this.bookId = id;
      this.description = description;
      this.title = title;
      this.author = author;
      this.availableQuantity = availableQuantity;
      this.totalQuantity = totalQuantity;
      this.price = price;
      this.rentPerDay = rentPerDay;
   }

   public int getBookId() {
      return bookId;
   }

   public void setBookId(int bookId) {
      this.bookId = bookId;
   }

   public String getTitle() {
      return title;
   }

   public void setTitle(String title) {
      this.title = title;
   }

   public String getAuthor() {
      return author;
   }

   public void setAuthor(String author) {
      this.author = author;
   }

   public String getDescription() {
      return description;
   }

   public void setAvailableQuantity(int availableQuantity) {
      this.availableQuantity = availableQuantity;
   }

   public int getAvailableQuantity() {
      return availableQuantity;
   }
   
   public void setTotalQuantity(int totalQuantity) {
      this.totalQuantity = totalQuantity;
   }

   public int getTotalQuantity() {
      return totalQuantity;
   }

   public void setPrice(double price) {
      this.price = price;
   }

   public double getPrice() {
      return price;
   }
   
   public void setRentPerDay(double rentPerDay) {
      this.rentPerDay = rentPerDay;
   }

   public double getRentPerDay() {
      return rentPerDay;
   }

   public String toString() {
      return ("Book Id: " + this.bookId + "\nTitle : " + this.title + "\nDescription: " + this.description
            + "\nAuthor: " + this.author+ "\nAvailable Quantity "+this.availableQuantity+
            "\nTotal Quantity "+this.totalQuantity+ "\nPrice "+this.price+ "\nRentPerDay "+this.rentPerDay);
   }

}
class Customer implements Serializable {
    private int userId;
    private String emailId;
    private String password;
    private String firstName;
    private String city;
    private String gender;
    private long phoneNumber;
    private String lastName;
    private Address address;
    
    public Customer(){
    }
    
    public Customer(int userId, String emailId, String password, String firstName, String lastName, 
    String city, String gender, long phoneNumber, Address address){
        this.userId = userId;
        this.emailId = emailId;
        this.password = password;
        this.firstName = firstName;
        this.city = city;
        this.gender = gender;
        this.phoneNumber = phoneNumber;
        this.lastName = lastName;
        this.address = address;
    }
    
     public void setAddress(Address address){
        this.address = address;
    }
    
    public Address getAddress(){
        return address;
    }
    
    public int getUserId(){
        return userId;
    }
    
    public String getEmailId(){
        return emailId;
    }
    
    public String getFirstName(){
        return firstName;
    }
    
    public String getPassword(){
        return password;
    }
    
    public String getCity(){
        return city;
    }
    
    public String getGender(){
        return gender;
    }
    
    public long getPhoneNumber(){
        return phoneNumber;
    }
    
    public String getLastName(){
        return lastName;
    }
    
    public void setUserId(int userId){
        this.userId = userId;
    }
    
    public void setEmailId(String emailId)
    {
        this.emailId = emailId;
    }
    
    public void setFirstName(String firstName)
    {
        this.firstName = firstName;
    }
    
    public void setPassword(String password)
    {
        this.password = password;
    }
    
    public void setGender(String gender)
    {
        this.gender = gender;
    }
    
    public void setCity(String city)
    {
        this.city = city;
    }
    
    public void setPhoneNumber(long phoneNumber)
    {
        this.phoneNumber = phoneNumber;
    }
    
    public void setLastName(String lastName)
    {
        this.lastName = lastName;
    }
}
class Address implements Serializable {
   String city, state, country;
   int zip;

   public Address(String state, String city, int zip, String country) {
      this.city = city;
      this.state = state;
      this.zip = zip;
      this.country = country;

   }

   public void setCity(String city) {
      this.city = city;
   }

   public void setState(String state) {
      this.state = state;
   }

   public void setZip(int zip) {
      this.zip = zip;
   }

   public void setCountry(String country) {
      this.country = country;
   }

   public String getCity() {
      return city;
   }

   public String getState() {
      return state;
   }

   public int getZip() {
      return zip;
   }

   public String getCountry() {
      return country;
   }

   @Override
   public String toString() {
      return getCity() + " " + getState() + " " + getZip() + " " + getCountry() + "";
   }
}
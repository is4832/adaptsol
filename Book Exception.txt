import java.util.*;

class BookNotFoundException extends RuntimeException {

   private static final long serialVersionUID = -1510453123644668900L;

   public BookNotFoundException(String message) {
      super(message);
   }

}

interface AdminService {
   void createBook(Book book);

   Book updateBook(Book book);

   void deleteBook(int id);
   
   Book searchBook(int id);

   Book[] getBooks();
}

class AdminServiceImpl implements AdminService {
   public static Book[] bookArray = new Book[5];
   public static int count = 0;

   @Override
   public void createBook(Book book){
        bookArray[count] = book;
        count++;
   }

   public Book updateBook(Book book) throws BookNotFoundException{
     boolean flag = false;
      for (int i = 0; i <= count; i++) {
         if (bookArray[i].getBookId() == book.getBookId()) {
            bookArray[i] = book;
            return book;
         }
      }
      if(flag == false)
       throw new BookNotFoundException("BookNotFoundException");
     return null;
   }

   public void deleteBook(int bookId) throws BookNotFoundException{
      boolean flag = false;
      for (int i = 0; i <= count; i++) {
         if (bookArray[i].getBookId() == bookId) {
            bookArray[i] = null;
            flag = true;
            break;
         }
      }
      if(flag == false){
       throw new BookNotFoundException("BookNotFoundException");
      } 
   }
   
   public Book searchBook(int bookId) throws BookNotFoundException{
      boolean flag = false;
      for (int i = 0; i <= count; i++) {
         if (bookArray[i].getBookId() == bookId) {
            return bookArray[i];
         }
      }
      if(flag == false){
       throw new BookNotFoundException("BookNotFoundException");
      }
      return null;
   }

   public Book[] getBooks() {
      return bookArray;
   }

}

class Book {
   private int bookId, availableQuantity, totalQuantity;
   private String title, description, author;
   private double price, rentPerDay;
   
   Book(){
   }

   Book(int id, String title, String description, String author, int availableQuantity, int totalQuantity, double price, double rentPerDay) {
      this.bookId = id;
      this.description = description;
      this.title = title;
      this.author = author;
      this.availableQuantity = availableQuantity;
      this.totalQuantity = totalQuantity;
      this.price = price;
      this.rentPerDay = rentPerDay;
   }

   public int getBookId() {
      return bookId;
   }

   public void setBookId(int bookId) {
      this.bookId = bookId;
   }

   public String getTitle() {
      return title;
   }

   public void setTitle(String title) {
      this.title = title;
   }

   public String getAuthor() {
      return author;
   }

   public void setAuthor(String author) {
      this.author = author;
   }

   public String getDescription() {
      return description;
   }

   public void setAvailableQuantity(int availableQuantity) {
      this.availableQuantity = availableQuantity;
   }

   public int getAvailableQuantity() {
      return availableQuantity;
   }
   
   public void setTotalQuantity(int totalQuantity) {
      this.totalQuantity = totalQuantity;
   }

   public int getTotalQuantity() {
      return totalQuantity;
   }

   public void setPrice(double price) {
      this.price = price;
   }

   public double getPrice() {
      return price;
   }
   
   public void setRentPerDay(double rentPerDay) {
      this.rentPerDay = rentPerDay;
   }

   public double getRentPerDay() {
      return rentPerDay;
   }

   public String toString() {
      return ("Book Id: " + this.bookId + "\nTitle : " + this.title + "\nDescription: " + this.description
            + "\nAuthor: " + this.author+ "\nAvailable Quantity "+this.availableQuantity+
            "\nTotal Quantity "+this.totalQuantity+ "\nPrice "+this.price+ "\nRentPerDay "+this.rentPerDay);
   }

}

class Source {
   public static void main(String args[]) throws Exception{
    try{
      Scanner s = new Scanner(System.in);
      int choice = s.nextInt();
      int id, availableQuantity, totalQuantity;
      String title, description, author;
      double price, rentPerDay;
      Book[] books;
      switch (choice) {
         case 1:
            if (s.hasNext()) {
               id = s.nextInt();
               s.nextLine();
               title = s.nextLine();
               description = s.nextLine();
               author = s.nextLine();
               availableQuantity = s.nextInt();
               totalQuantity = s.nextInt();
               price = s.nextDouble();
               rentPerDay = s.nextDouble();
               Book t = new Book(id, title, description, author, availableQuantity, totalQuantity, price, rentPerDay);
               AdminService adm = new AdminServiceImpl();
               adm.createBook(t);
               books = adm.getBooks();
               System.out.println(t);
            }
            break;
         case 2:
            id = s.nextInt();
            s.nextLine();
            title = s.nextLine();
            description = s.nextLine();
            author = s.nextLine();
            availableQuantity = s.nextInt();
            totalQuantity = s.nextInt();
            price = s.nextDouble();
            rentPerDay = s.nextDouble();
            Book t1 = new Book(id, title, description, author, availableQuantity, totalQuantity, price, rentPerDay);
            AdminService adm1 = new AdminServiceImpl();
            t1 = adm1.updateBook(t1);
            System.out.println(adm1.toString());
            break;
         case 3:
            id = s.nextInt();
            AdminService adm2 = new AdminServiceImpl();
            adm2.deleteBook(id);
            break;
         case 4:
            id = s.nextInt();
            Book t3;
            AdminService adm3 = new AdminServiceImpl();
            t3 = adm3.searchBook(id);
            System.out.println(t3);
            break;
         case 5:
            AdminService adm4 = new AdminServiceImpl();
            books = adm4.getBooks();
            for (int i = 0; i < books.length; i++) {
               System.out.println(adm4.toString());
            }
      }
      s.close();
    } catch(BookNotFoundException e)
    {
        System.out.println(e.getMessage());
    }
   }
}